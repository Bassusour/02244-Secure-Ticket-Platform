Protocol: PurchaseTicketsMerged

Types: 
Agent C, M, bank, mitId;
Function creditCard;
Number ProofOfId, N1, N2, N3, ProofOfId;

Knowledge:
C: C, M, mitId, pk(mitId), pk(M), pk(bank), sk(C, M), sk(C,mitId), sk(C,bank), creditCard(C, bank);
M: C, M, mitId, pk(mitId), pk(bank), pk(M), inv(pk(M));
bank: C, M, bank, pk(M), pk(bank), pk(mitId), inv(pk(bank)), sk(C,bank), creditCard(C, bank);
mitId: C, M, mitId, pk(mitId), sk(C,mitId), pk(M), inv(pk(mitId));
where C!=M, C!=bank, M!=bank

Actions:
# Old protocol
# ----------------------------------------------
mitId ->* C: {|N1, {C, M, N1, ProofOfId}inv(pk(mitId))|}sk(C,mitId)

# New protocol
# ----------------------------------------------
# Customer requests a ticket
C *->* M: C, M, TicketOrder, N1, N2

# Merchant requests payment
M *->* C: C, M, TicketOrder, Price, N1, N2

# Customer requests money from bank
C *-> bank: {C, M, creditCard(C, bank), TicketOrder, Price, N1, N2, N3, {C, M, N1,ProofOfId}inv(pk(mitId))}pk(bank)

# Bank authorizes payment
bank ->* C: {|C, M, N1, N2, N3, {TicketOrder, Price}inv(pk(bank))|}sk(C,bank)

C *->* M: {|C, M, N1, N2, N3, {TicketOrder, Price}inv(pk(bank))|}sk(C, M)

Goals:
creditCard(C, bank) secret between C, bank
bank authenticates C on ProofOfId

# Problem
# bank cannot authenticate C based on ProofOfId (it can weakly authenticate)
# Man in the middle attack